apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.github.triplet.play'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "com.albandroid.filmoteca"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 36
        versionName "1.2.8"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        initPlayStoreApiKeys()
        initFabricKeys(manifestPlaceholders)
        initTwitterKeys(manifestPlaceholders)
    }
    lintOptions {
        abortOnError false
    }
    signingConfigs {
        release {
            storeFile file("../release.keystore")
            storePassword loadStorePassword()
            keyAlias loadKeyAlias()
            keyPassword loadKeyPassword()
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    productFlavors {

        flavorDimensions "environment"

        real {
            flavorDimensions "color"
        }
        mock {
            flavorDimensions "color"
        }
    }
    play {
        track = 'production'
        jsonFile = file('../keys.json')
    }

}

def initPlayStoreApiKeys() {
    File keysJsonFile = file('../keys.json')
    if (keysJsonFile.exists()) {
        println "PLAY STORE KEYS JSON IS IN THE ROOT PROJECT DIR"
    } else {
        String playStoreKeysJsonEncoded = System.getenv('PLAY_STORE_KEYS_JSON')
        if (playStoreKeysJsonEncoded != null) {
            println "PLAY STORE KEYS JSON IS IN THE ENVIRONMENT"
            String playStoreKeysJsonDecoded = new String(playStoreKeysJsonEncoded.decodeBase64())
            keysJsonFile.write(playStoreKeysJsonDecoded)
        } else {
            println "CANT FIND PLAYSTORE KEYS"
        }
    }
}

def initFabricKeys(Map<String, Object> manifestPlaceholders) {
    String fabricApiKey = System.getenv("FABRIC_API_KEY")
    if (fabricApiKey == null) {
        println "LOADING FABRIC KEYS FROM LOCAL"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        fabricApiKey = properties.getProperty("fabric.api.key")
    } else {
        println "LOADING FABRIC KEYS FROM ENVIRONMENT"
    }

    manifestPlaceholders.put("fabricApiKey", fabricApiKey)
}

def initTwitterKeys(Map<String, Object> manifestPlaceholders) {
    String twitterApiKey = System.getenv("TWITTER_API_KEY")
    String twitterApiSecret = System.getenv("TWITTER_API_SECRET")
    if (twitterApiKey == null || twitterApiSecret == null) {
        println "LOADING TWITTER KEYS FROM LOCAL"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        twitterApiKey = properties.getProperty("twitter.api.key")
        twitterApiSecret = properties.getProperty("twitter.api.secret")
    } else {
        println "LOADING TWITTER KEYS FROM ENVIRONMENT"
    }
    manifestPlaceholders.put("twitterApiKey", twitterApiKey)
    manifestPlaceholders.put("twitterApiSecret", twitterApiSecret)
}

def loadStorePassword() {
    String storePassword = System.getenv("STORE_PASSWORD")
    if (storePassword == null) {
        println "STORE_PASSWORD ENVIRONMENT VARIABLE NOT FOUND"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        storePassword = properties.getProperty("store.password")
    } else {
        println "STORE_PASSWORD ENVIRONMENT VARIABLE FOUND"
    }
    return storePassword
}

def loadKeyAlias() {
    String keyAlias = System.getenv("KEY_ALIAS")
    if (keyAlias == null) {
        println "KEY_ALIAS ENVIRONMENT VARIABLE NOT FOUND"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        keyAlias = properties.getProperty("key.alias")
    } else {
        println "KEY_ALIAS ENVIRONMENT VARIABLE FOUND"
    }
    return keyAlias
}

def loadKeyPassword() {
    String keyPassword = System.getenv("KEY_PASSWORD")
    if (keyPassword == null) {
        println "KEY_PASSWORD ENVIRONMENT VARIABLE NOT FOUND"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        keyPassword = properties.getProperty("key.password")
    } else {
        println "KEY_PASSWORD ENVIRONMENT VARIABLE FOUND"
    }
    return keyPassword
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //ANDROID SUPPORT LIBRARIES
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:exifinterface:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'

    // UNIT TESTING
    testImplementation 'junit:junit:4.12'
    // Set this dependency if you want to use Mockito
    testImplementation 'org.mockito:mockito-core:2.18.0'
    // Set this dependency if you want to use Hamcrest matching
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'

    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'

    // DEPENDENCY INJECTION
    implementation 'com.google.dagger:dagger:2.16'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.16'
    // VIEW INJECTION
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation 'com.vsa:paperknife:1.1'

    // RX JAVA
    implementation 'io.reactivex:rxandroid:1.2.1'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    implementation 'io.reactivex:rxjava:1.1.6'

    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'

    implementation 'org.jsoup:jsoup:1.9.2'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation('com.twitter.sdk.android:twitter:3.1.1') {
        exclude group: 'com.squareup.picasso', module: 'picasso'
    }
    implementation('com.crashlytics.sdk.android:crashlytics:2.6.1@aar') {
        transitive = true
    }

}
