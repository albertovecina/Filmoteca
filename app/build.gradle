apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.github.triplet.play'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.jakewharton.hugo'

android {
    compileSdkVersion 24
    buildToolsVersion "23.0.3"
    defaultConfig {
        applicationId "com.albandroid.filmoteca"
        minSdkVersion 14
        targetSdkVersion 24
        versionCode 28
        versionName "1.2.4"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        initPlayStoreApiKeys()
        initFabricKeys(manifestPlaceholders)
    }
    lintOptions {
        abortOnError false
    }
    signingConfigs {
        release {
            storeFile file("../release.keystore")
            storePassword loadStorePassword()
            keyAlias loadKeyAlias()
            keyPassword loadKeyPassword()
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    productFlavors {
        real {
        }
        mock {
        }
    }
    play {
        track = 'production'
        jsonFile = file('../keys.json')
    }

}

def initPlayStoreApiKeys() {
    File keysJsonFile = file('../keys.json')
    if (keysJsonFile.exists()) {
        println "PLAY STORE KEYS JSON IS IN THE ROOT PROJECT DIR"
    } else {
        println "PLAY STORE KEYS JSON IS IN THE ENVIRONMENT"
        String playStoreKeysJsonEncoded = System.getenv('PLAY_STORE_KEYS_JSON')
        String playStoreKeysJsonDecoded = new String(playStoreKeysJsonEncoded.decodeBase64())
        keysJsonFile.write(playStoreKeysJsonDecoded)
    }
}

def initFabricKeys(Map<String, Object> manifestPlaceholders) {
    String fabricApiKey = System.getenv("FABRIC_API_KEY")
    String twitterApiKey = System.getenv("TWITTER_API_KEY")
    String twitterApiSecret = System.getenv("TWITTER_API_SECRET")
    Properties properties = new Properties()
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
    if (fabricApiKey == null)
        fabricApiKey = properties.getProperty("fabric.api.key");
    if (twitterApiKey == null)
        twitterApiKey = properties.getProperty("twitter.api.key");
    if (twitterApiSecret == null)
        twitterApiSecret = properties.getProperty("twitter.api.secret");
    manifestPlaceholders.put("fabricApiKey", fabricApiKey)
    manifestPlaceholders.put("twitterApiKey", twitterApiKey)
    manifestPlaceholders.put("twitterApiSecret", twitterApiSecret)
}

def loadStorePassword() {
    String storePassword = System.getenv("STORE_PASSWORD");
    if (storePassword == null) {
        println "STORE_PASSWORD ENVIRONMENT VARIABLE NOT FOUND"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        storePassword = properties.getProperty("store.password");
    } else {
        println "STORE_PASSWORD ENVIRONMENT VARIABLE FOUND"
    }
    return storePassword;
}

def loadKeyAlias() {
    String keyAlias = System.getenv("KEY_ALIAS");
    if (keyAlias == null) {
        println "KEY_ALIAS ENVIRONMENT VARIABLE NOT FOUND"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        keyAlias = properties.getProperty("key.alias");
    } else {
        println "KEY_ALIAS ENVIRONMENT VARIABLE FOUND"
    }
    return keyAlias;
}

def loadKeyPassword() {
    String keyPassword = System.getenv("KEY_PASSWORD");
    if (keyPassword == null) {
        println "KEY_PASSWORD ENVIRONMENT VARIABLE NOT FOUND"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        keyPassword = properties.getProperty("key.password");
    } else {
        println "KEY_PASSWORD ENVIRONMENT VARIABLE FOUND"
    }
    return keyPassword;
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:24.1.0'

    // UNIT TESTING
    testCompile 'junit:junit:4.12'
    // Set this dependency if you want to use Mockito
    testCompile 'org.mockito:mockito-core:1.10.19'
    // Set this dependency if you want to use Hamcrest matching
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'

    androidTestCompile 'com.android.support:support-annotations:24.1.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'

    // DEPENDENCY INJECTION
    compile 'com.google.dagger:dagger:2.2'
    provided 'javax.annotation:jsr250-api:1.0'
    apt 'com.google.dagger:dagger-compiler:2.0'
    // VIEW INJECTION
    compile 'com.jakewharton:butterknife:8.2.1'
    apt 'com.jakewharton:butterknife-compiler:8.2.1'
    compile 'com.vsa:paperknife:1.1'

    // RX JAVA
    compile 'io.reactivex:rxandroid:1.2.1'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    compile 'io.reactivex:rxjava:1.1.6'

    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'com.squareup.retrofit2:converter-scalars:2.1.0'

    compile 'org.jsoup:jsoup:1.9.2'
    compile 'com.melnykov:floatingactionbutton:1.3.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile('com.twitter.sdk.android:twitter:1.14.1@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:crashlytics:2.6.1@aar') {
        transitive = true;
    }

}
