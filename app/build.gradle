plugins {
    id("com.android.application")
    id("com.github.triplet.play") version "2.2.1"
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 30
    buildToolsVersion '29.0.2'
    defaultConfig {
        applicationId "com.albandroid.filmoteca"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 39
        versionName "1.2.9"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        initGoogleServicesJson()
        initPlayStoreApiKeys()
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        release {
            storeFile file("../release.keystore")
            storePassword loadStorePassword()
            keyAlias loadKeyAlias()
            keyPassword loadKeyPassword()
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    productFlavors {

        flavorDimensions "environment"

        real {
            flavorDimensions "environment"
        }
        mock {
            flavorDimensions "environment"
        }
    }
    play {
        track = 'production'
        serviceAccountCredentials = file('../keys.json')
    }

}

androidExtensions {
    experimental = true
}

def initPlayStoreApiKeys() {
    File keysJsonFile = file('../keys.json')
    if (keysJsonFile.exists()) {
        println "PLAY STORE KEYS JSON IS IN THE ROOT PROJECT DIR"
    } else {
        String playStoreKeysJsonEncoded = System.getenv('PLAY_STORE_KEYS_JSON')
        if (playStoreKeysJsonEncoded != null) {
            println "PLAY STORE KEYS JSON IS IN THE ENVIRONMENT"
            String playStoreKeysJsonDecoded = new String(playStoreKeysJsonEncoded.decodeBase64())
            keysJsonFile.write(playStoreKeysJsonDecoded)
        } else {
            println "CANT FIND PLAYSTORE KEYS"
        }
    }
}

def initGoogleServicesJson() {
    File googleServicesJsonFile = file('google-services.json')
    if (googleServicesJsonFile.exists()) {
        println "google-services.json IS IN THE ROOT PROJECT DIR"
    } else {
        String googleServicesJsonBase64 = System.getenv("GOOGLE_SERVICES_JSON")
        if (googleServicesJsonBase64 == null) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file("local.properties").newDataInputStream())
            googleServicesJsonBase64 = properties.getProperty("google.services.json")
            if (googleServicesJsonBase64 != null)
                println "google-services.json IS IN THE local-properties"
        } else {
            println "google-services.json IS IN THE ENVIRONMENT"
        }
        if (googleServicesJsonBase64 == null) {
            println "CANT FIND google-services.json"
        } else {
            String googleServicesJsonDecoded = new String(googleServicesJsonBase64.decodeBase64())
            googleServicesJsonFile.write(googleServicesJsonDecoded)
            println "google-services.json SUCCESSFULLY CREATED"
        }
    }
}

def loadStorePassword() {
    String storePassword = System.getenv("STORE_PASSWORD")
    if (storePassword == null) {
        println "STORE_PASSWORD ENVIRONMENT VARIABLE NOT FOUND"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        storePassword = properties.getProperty("store.password")
    } else {
        println "STORE_PASSWORD ENVIRONMENT VARIABLE FOUND"
    }
    return storePassword
}

def loadKeyAlias() {
    String keyAlias = System.getenv("KEY_ALIAS")
    if (keyAlias == null) {
        println "KEY_ALIAS ENVIRONMENT VARIABLE NOT FOUND"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        keyAlias = properties.getProperty("key.alias")
    } else {
        println "KEY_ALIAS ENVIRONMENT VARIABLE FOUND"
    }
    return keyAlias
}

def loadKeyPassword() {
    String keyPassword = System.getenv("KEY_PASSWORD")
    if (keyPassword == null) {
        println "KEY_PASSWORD ENVIRONMENT VARIABLE NOT FOUND"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        keyPassword = properties.getProperty("key.password")
    } else {
        println "KEY_PASSWORD ENVIRONMENT VARIABLE FOUND"
    }
    return keyPassword
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //ANDROID SUPPORT LIBRARIES
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    //CRASH REPORT
    implementation 'com.google.firebase:firebase-core:18.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.3.0'
    implementation 'com.google.firebase:firebase-analytics:18.0.0'

    //CLOUD MESSAGING
    implementation 'com.google.firebase:firebase-messaging:21.0.0'

    // UNIT TESTING
    testImplementation 'junit:junit:4.13'
    // Set this dependency if you want to use Mockito
    testImplementation 'org.mockito:mockito-core:3.5.6'
    // Set this dependency if you want to use Hamcrest matching
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'

    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'

    // DEPENDENCY INJECTION
    api 'com.google.dagger:dagger:2.27'
    kapt 'com.google.dagger:dagger-compiler:2.27'
    api 'com.google.dagger:dagger-android-support:2.27'
    kapt 'com.google.dagger:dagger-android-processor:2.27'

    // RX JAVA
    implementation 'io.reactivex:rxandroid:1.2.1'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    implementation 'io.reactivex:rxjava:1.2.2'

    implementation 'com.squareup.okhttp3:okhttp:4.2.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'

    implementation 'org.jsoup:jsoup:1.12.1'
    implementation 'com.squareup.picasso:picasso:2.71828'

}
apply plugin: 'com.google.gms.google-services'
